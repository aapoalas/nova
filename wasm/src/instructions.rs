use crate::decoder::common::RefKind;
use crate::decoder::common::ValueKind;

pub struct MemArg {
    pub alignment: u32,
    pub offset: u32,
}

pub enum Instruction {
    // Control Instructions
    Unreachable,
    Nop,
    Block(Option<Box<[ValueKind]>>),
    Loop(Option<Box<[ValueKind]>>),
    If(Option<Box<[ValueKind]>>),
    Else,
    Br(u32),
    BrIf(u32),
    /// `BrTable(table_ids, default)`
    BrTable(Box<[u32]>, u32),
    Return,
    /// `Call(function_id)`
    Call(u32),
    /// `CallIndirect(table_id, signature_id)`
    CallIndirect(u32, u32),
    End,

    // Reference Instructions
    RefNull(RefKind),
    RefIsNull,
    RefFunc(u32),

    // Parametric Instructions
    Drop,
    Select(Option<Box<[ValueKind]>>),

    // Variable Instructions
    LocalGet(u32),
    LocalSet(u32),
    LocalTee(u32),
    GlobalGet(u32),
    GlobalSet(u32),

    // Table Instructions
    TableGet(u32),
    TableSet(u32),
    /// `TableInit(element_id, table_id)`
    TableInit(u32, u32),
    /// `TableCopy(table_id_src, table_id_dst)`
    TableCopy(u32, u32),
    TableGrow(u32),
    TableSize(u32),
    TableFill(u32),

    // Memory Instructions
    I32Load(MemArg),
    I64Load(MemArg),
    F32Load(MemArg),
    F64Load(MemArg),
    I32Load8S(MemArg),
    I32Load8U(MemArg),
    I32Load16S(MemArg),
    I32Load16U(MemArg),
    I64Load8S(MemArg),
    I64Load8U(MemArg),
    I64Load16S(MemArg),
    I64Load16U(MemArg),
    I64Load32S(MemArg),
    I64Load32U(MemArg),
    I32Store(MemArg),
    I64Store(MemArg),
    F32Store(MemArg),
    F64Store(MemArg),
    I32Store8(MemArg),
    I32Store16(MemArg),
    I64Store8(MemArg),
    I64Store16(MemArg),
    I64Store32(MemArg),
    MemorySize,
    MemoryGrow,
    /// `MemoryInit(data_id)`
    MemoryInit(u32),
    DataDrop(u32),
    MemoryCopy,
    MemoryFill,

    // Numeric Instructions
    I32Const(i32),
    I64Const(i64),
    F32Const(f32),
    F64Const(f64),

    I32EqualZero,
    I32Equal,
    I32NotEqual,
    I32LessThanSigned,
    I32LessThanUnsigned,
    I32GreaterThanSigned,
    I32GreaterThanUnsigned,
    I32LessEqualSigned,
    I32LessEqualUnsigned,
    I32GreaterEqualSigned,
    I32GreaterEqualUnsigned,
    I32Eqz,
    I64Equal,
    I64NotEqual,
    I64LessThanSigned,
    I64LessThanUnsigned,
    I64GreaterThanSigned,
    I64GreaterThanUnsigned,
    I64LessEqualSigned,
    I64LessEqualUnsigned,
    I64GreaterEqualSigned,
    I64GreaterEqualUnsigned,

    F32Equal,
    F32NotEqual,
    F32LessThan,
    F32GreaterThan,
    F32LessEqual,
    F32GreaterEqual,

    F64Equal,
    F64NotEqual,
    F64LessThan,
    F64GreaterThan,
    F64LessEqual,
    F64GreaterEqual,

    I32Clz,
    I32Ctz,
    I32Popcnt,
    I32Add,
    I32Sub,
    I32Mul,
    I32DivS,
    I32DivU,
    I32RemS,
    I32RemU,
    I32And,
    I32Or,
    I32Xor,
    I32Shl,
    I32ShrS,
    I32ShrU,
    I32Rotl,
    I32Rotr,

    I64Clz,
    I64Ctz,
    I64Popcnt,
    I64Add,
    I64Sub,
    I64Mul,
    I64DivS,
    I64DivU,
    I64RemS,
    I64RemU,
    I64And,
    I64Or,
    I64Xor,
    I64Shl,
    I64ShrS,
    I64ShrU,
    I64Rotl,
    I64Rotr,

    F32Abs,
    F32Neg,
    F32Ceil,
    F32Floor,
    F32Trunc,
    F32Nearest,
    F32Sqrt,
    F32Add,
    F32Sub,
    F32Mul,
    F32Div,
    F32Min,
    F32Max,
    F32CopySign,

    F64Abs,
    F64Neg,
    F64Ceil,
    F64Floor,
    F64Trunc,
    F64Nearest,
    F64Sqrt,
    F64Add,
    F64Sub,
    F64Mul,
    F64Div,
    F64Min,
    F64Max,
    F64CopySign,

    I32WrapI64,
    I32TruncF32S,
    I32TruncF32U,
    I32TruncF64S,
    I32TruncF64U,

    I64ExtendI32S,
    I64ExtendI32U,
    I64TruncF32S,
    I64TruncF32U,
    I64TruncF64S,
    I64TruncF64U,

    F32ConvertI32S,
    F32ConvertI32U,
    F32ConvertI64S,
    F32ConvertI64U,
    F32DemoteF64,

    F64ConvertI32S,
    F64ConvertI32U,
    F64ConvertI64S,
    F64ConvertI64U,
    F64PromoteF32,

    I32ReinterpretF32,
    I64ReinterpretF64,
    F32ReinterpretI32,
    F64ReinterpretI64,

    I32Extend8S,
    I32Extend16S,
    I64Extend8S,
    I64Extend16S,
    I64Extend32S,

    I32TruncSatF32S,
    I32TruncSatF32U,
    I32TruncSatF64S,
    I32TruncSatF64U,
    I64TruncSatF32S,
    I64TruncSatF32U,
    I64TruncSatF64S,
    I64TruncSatF64U,
}
